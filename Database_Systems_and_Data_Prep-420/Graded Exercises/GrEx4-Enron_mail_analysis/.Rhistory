# Write function for computing uncorrected Pearson Chi-squared statistic and associated p-value
chi_sq_obs_val =0
for (r in 1:2){
for (c in 1:2){
tmp = 0
tmp = ((my_table[r,c]-e_table[r,c])^2)/e_table[r,c]
chi_sq_obs_val = chi_sq_obs_val+tmp
print (paste(r,c,tmp,chi_sq_obs_val ))
}
}
# test against part (b) and print results
good_comp_msg <- paste0("The two Chi_Squared values ", chi_sq_obs_val, " and ", my_test$statistic, " match")
failed_msg <- paste0("The two Chi_Squared values ", chi_sq_obs_val, " and ", my_test$statistic, " failed to match")
if (my_test$statistic == chi_sq_obs_val) print (good_comp_msg) else print (failed_msg)
# calculate the p-value
degree_free <- (nrow(e_table)-1) * (ncol(e_table)-1)
p_value <- pchisq(chi_sq_obs_val, degree_free, lower.tail = FALSE)
good_comp_msg <- paste0("The two p-values ", p_value, " and ", my_test$p.value, " match")
failed_msg <- paste0("The two p-values ", p_value, " and ", my_test$p.value, " failed to match")
if (my_test$p.value == p_value) print (good_comp_msg) else print (failed_msg)
mar_tab <- addmargins(my_table)
# The following code may be incorporated into your function to calculate the expected
# values for a 2 x 2 contingency table; code assumes margins have been added to table
e11 <- mar_tab[3, 1] * mar_tab[1, 3] / mar_tab[3, 3]
e12 <- mar_tab[3, 2] * mar_tab[1, 3] / mar_tab[3, 3]
e21 <- mar_tab[3, 1] * mar_tab[2, 3] / mar_tab[3, 3]
e22 <- mar_tab[3, 2] * mar_tab[2, 3] / mar_tab[3, 3]
e_table <- as.table(matrix(c(e11,e12,e21,e22), ncol=2))
# Write function for computing uncorrected Pearson Chi-squared statistic and associated p-value
chi_sq_obs_val =0
for (r in 1:2){
for (c in 1:2){
tmp = 0
tmp = ((my_table[r,c]-e_table[r,c])^2)/e_table[r,c]
chi_sq_obs_val = chi_sq_obs_val+tmp
}
}
# test against part (b) and print results
good_comp_msg <- paste0("The two Chi_Squared values ", chi_sq_obs_val, " and ", my_test$statistic, " match")
failed_msg <- paste0("The two Chi_Squared values ", chi_sq_obs_val, " and ", my_test$statistic, " failed to match")
if (my_test$statistic == chi_sq_obs_val) print (good_comp_msg) else print (failed_msg)
# calculate the p-value
degree_free <- (nrow(e_table)-1) * (ncol(e_table)-1)
p_value <- pchisq(chi_sq_obs_val, degree_free, lower.tail = FALSE)
good_comp_msg <- paste0("The two p-values ", p_value, " and ", my_test$p.value, " match")
failed_msg <- paste0("The two p-values ", p_value, " and ", my_test$p.value, " failed to match")
if (my_test$p.value == p_value) print (good_comp_msg) else print (failed_msg)
# Determine two-sided, 95% confidence interval for the average weight gain, week 20 to 21
n_sample <- 10
avg_gain <- post - pre
sample_mean <- mean(avg_gain)
sample_sd <- sd(avg_gain)
conf_lvl <- .95
alpha_over_2 <- conf_lvl+ (1-conf_lvl)/2                ## 2 tailed
tmp <- qt(alpha_over_2, df=n_sample-1) * sample_sd/sqrt(n_sample)
lower <- sample_mean - tmp
upper <- sample_mean + tmp
print(paste0 ("the 95% confidence interval is:",lower, " <= x <= ", upper))
# Create 2 x 2 contingency table via table()
my_table <- table(killed, month)
#my_table
# Conduct chi-square test of independence of "killed" and "month", correct = FALSE
ci <- .95
row_nums <- 2
col_nums <-2
df <- (row_nums-1)*(col_nums-1)
crit_val <- qchisq(ci, df)
print(paste0("the critical value is: ",crit_val))
my_test <- chisq.test(my_table, correct = FALSE)
reject_null_msg = "Observed val > critical value, reject null hypothesis. Reject independence at a 95% confidence interval"
fail_reject_msg = "Failed to reject the null hypothesis"
if (my_test$statistic > crit_val) print (reject_null_msg) else print (fail_reject_msg)
#Clear Workspace
rm(list=ls())
# Clear Console:
cat("\014")
library(stats)
#Confidence Interval to estimate mu1 - mu2
sample1_n <-32
sample1_mean <- 45.6
#sample1_sd <-
sample1_var <- 93
sample2_n <- 37
sample2_mean <- 49.4
#sample2_sd <-
sample2_var <- 88
conf_lvl <- .98
# 2 tails
z <- round(qnorm(fix_conf), 3)
# using population variances
lower <- (sample1_mean - sample2_mean) - z*(sqrt(sample1_var/sample1_n + sample2_var/sample2_n))
upper <- (sample1_mean - sample2_mean) + z*(sqrt(sample1_var/sample1_n + sample2_var/sample2_n))
# using std deviations
# lower <- (sample1_mean - sample2_mean) - z*(sqrt((sample1_sd^2/sample1_n) + (sample2_var^2/sample2_n)))
# upper <- (sample1_mean - sample2_mean) + z*(sqrt((sample1_sd^2/sample1_n) + (sample2_var^2/sample2_n)))
z <- round(qnorm(fix_conf), 3)
# 2 tails
alpha_o_2 <- conf_lvl+ (1-conf_lvl)/2
z <- round(qnorm(alpha_o_2), 3)
z <- round(qnorm(alpha_o_2), 2)
lower <- (sample1_mean - sample2_mean) - z*(sqrt(sample1_var/sample1_n + sample2_var/sample2_n))
upper <- (sample1_mean - sample2_mean) + z*(sqrt(sample1_var/sample1_n + sample2_var/sample2_n))
print(paste("lower =", lower))
print(paste("upper =", upper))
print(paste("lower =", round(lower, 3)))
print(paste("upper =", round(upper, 3)))
sample1_n <-32
sample1_mean <- 45.6
sample1_sd <- sqrt(93)
sample2_n <- 37
sample2_mean <- 49.4
sample2_sd <- sqrt(88)
conf_lvl <- .98
# 2 tails
alpha_o_2 <- conf_lvl+ (1-conf_lvl)/2
z <- round(qnorm(alpha_o_2), 2)
# using std deviations
lower <- (sample1_mean - sample2_mean) - z*(sqrt((sample1_sd^2/sample1_n) + (sample2_var^2/sample2_n)))
upper <- (sample1_mean - sample2_mean) + z*(sqrt((sample1_sd^2/sample1_n) + (sample2_var^2/sample2_n)))
print(paste("lower =", round(lower, 3)))
print(paste("upper =", round(upper, 3)))
lower <- (sample1_mean - sample2_mean) - z*(sqrt(sample1_sd^2/sample1_n + sample2_var^2/sample2_n))
upper <- (sample1_mean - sample2_mean) + z*(sqrt(sample1_sd^2/sample1_n + sample2_var^2/sample2_n))
print(paste("lower =", round(lower, 3)))
print(paste("upper =", round(upper, 3)))
sample1_n <-32
sample1_mean <- 45.6
sample1_sd <- sqrt(93)
sample2_n <- 37
sample2_mean <- 49.4
sample2_sd <- sqrt(88)
conf_lvl <- .98
alpha_o_2 <- conf_lvl+ (1-conf_lvl)/2
z <- round(qnorm(alpha_o_2), 2)
lower <- (sample1_mean - sample2_mean) - z*(sqrt(sample1_sd^2/sample1_n + sample2_var^2/sample2_n))
upper <- (sample1_mean - sample2_mean) + z*(sqrt(sample1_sd^2/sample1_n + sample2_var^2/sample2_n))
print(paste("lower =", round(lower, 3)))
print(paste("upper =", round(upper, 3)))
sample1_sd
sample2_sd
sample1_n <-32
sample1_mean <- 45.6
sample1_sd <- 9.643651
sample2_n <- 37
sample2_mean <- 49.4
sample2_sd <- 9.380832
conf_lvl <- .98
# 2 tails
alpha_o_2 <- conf_lvl+ (1-conf_lvl)/2
z <- round(qnorm(alpha_o_2), 2)
# using std deviations
lower <- (sample1_mean - sample2_mean) - z*(sqrt(sample1_sd^2/sample1_n + sample2_var^2/sample2_n))
upper <- (sample1_mean - sample2_mean) + z*(sqrt(sample1_sd^2/sample1_n + sample2_var^2/sample2_n))
print(paste("lower =", round(lower, 3)))
print(paste("upper =", round(upper, 3)))
sample1_n <-32
sample1_mean <- 45.6
sample1_sd <- 9.643651
sample2_n <- 37
sample2_mean <- 49.4
sample2_sd <- 9.380832
conf_lvl <- .98
sample1_var <- sample1_sd^2
sample2_var <- sample2_sd^2
# 2 tails
alpha_o_2 <- conf_lvl+ (1-conf_lvl)/2
z <- round(qnorm(alpha_o_2), 2)
# using std deviations
lower <- (sample1_mean - sample2_mean) - z*(sqrt(sample1_var/sample1_n + sample2_var/sample2_n))
upper <- (sample1_mean - sample2_mean) + z*(sqrt(sample1_var/sample1_n + sample2_var/sample2_n))
print(paste("lower =", round(lower, 3)))
print(paste("upper =", round(upper, 3)))
sample1_var <- round(sample1_sd^2,4)
sample2_var <- round(sample2_sd^2,4)
# 2 tails
alpha_o_2 <- conf_lvl+ (1-conf_lvl)/2
z <- round(qnorm(alpha_o_2), 2)
# using std deviations
lower <- (sample1_mean - sample2_mean) - z*(sqrt(sample1_var/sample1_n + sample2_var/sample2_n))
upper <- (sample1_mean - sample2_mean) + z*(sqrt(sample1_var/sample1_n + sample2_var/sample2_n))
print(paste("lower =", round(lower, 3)))
print(paste("upper =", round(upper, 3)))
## Using values for population variance
sample1_n <-85
sample1_mean <- 168
pop1_var <- 783
sample2_n <- 70
sample2_mean <- 161
pop2_var <-780
conf_lvl <- .94
# 2 tails
alpha_o_2 <- conf_lvl+ (1-conf_lvl)/2
z <- round(qnorm(alpha_o_2), 2)
# using population variances
lower <- (sample1_mean - sample2_mean) - z*(sqrt(pop1_var/sample1_n + pop2_var/sample2_n))
upper <- (sample1_mean - sample2_mean) + z*(sqrt(pop1_var/sample1_n + pop2_var/sample2_n))
print(paste("lower =", round(lower, 3)))
print(paste("upper =", round(upper, 3)))
Observed z-value
## Using values for population standard deviation
sample1_n <-45
sample1_mean <- 7.1
pop1_sd <- 2.3
sample2_n <- 52
sample2_mean <- 6.2
pop2_sd <- 2.7
pop1_var <- pop1_sd^2
pop2_var <- pop2_sd^2
# using population variances
observed_z <- (sample1_mean - sample2_mean)/(sqrt(pop1_var/sample1_n + pop2_var/sample2_n))
print(paste("observed z value =", round(observed_z, 3)))
sample1_n <-45
sample1_mean <- 7.1
pop1_sd <- 2.3
sample2_n <- 52
sample2_mean <- 6.2
pop2_sd <- 2.7
pop1_var <- pop1_sd^2
pop2_var <- pop2_sd^2
# using population variances
critical_value <- (sample1_mean - sample2_mean)/(sqrt(pop1_var/sample1_n + pop2_var/sample2_n))
lower <- (sample1_mean - sample2_mean) - z*(sqrt(sample1_var/sample1_n + sample2_var/sample2_n))
upper <- (sample1_mean - sample2_mean) + z*(sqrt(sample1_var/sample1_n + sample2_var/sample2_n))
print(paste("critical value =", round(observed_z, 3)))
print(paste("lower =", round(lower, 3)))
print(paste("upper =", round(upper, 3)))
sample1_n <-45
sample1_mean <- 7.1
pop1_sd <- 2.3
sample2_n <- 52
sample2_mean <- 6.2
pop2_sd <- 2.7
conf_lvl <- .10
# 2 tails
alpha_o_2 <- conf_lvl+ (1-conf_lvl)/2
z <- round(qnorm(alpha_o_2), 2)
pop1_var <- pop1_sd^2
pop2_var <- pop2_sd^2
# using population variances
critical_value <- (sample1_mean - sample2_mean)/(sqrt(pop1_var/sample1_n + pop2_var/sample2_n))
lower <- (sample1_mean - sample2_mean) - z*(sqrt(sample1_var/sample1_n + sample2_var/sample2_n))
upper <- (sample1_mean - sample2_mean) + z*(sqrt(sample1_var/sample1_n + sample2_var/sample2_n))
print(paste("critical value =", round(observed_z, 3)))
print(paste("lower =", round(lower, 3)))
print(paste("upper =", round(upper, 3)))
sample1_n <-38
sample1_mean <- 38.4
#pop1_sd <- 2.3
pop1_var <- 50.5
sample2_n <- 32
sample2_mean <- 44.3
#pop2_sd <- 2.7
pop2_var <- 48.6
conf_lvl <- .05
# 2 tails
z <- round(qnorm(conf_lvl), 2)
pop1_var <- pop1_sd^2
pop2_var <- pop2_sd^2
# using population variances
critical_value <- (sample1_mean - sample2_mean)/(sqrt(pop1_var/sample1_n + pop2_var/sample2_n))
print(paste("critical value =", round(observed_z, 3)))
critical_value <- (sample1_mean - sample2_mean)/(sqrt(pop1_var/sample1_n + pop2_var/sample2_n))
print(paste("critical value =", round(critical_value, 3)))
print(paste("critical value =", round(z, 3)))
z <- round(qnorm(conf_lvl), 4)
print(paste("critical value =", round(z, 3)))
sample1_n <-38
sample1_mean <- 38.4
#pop1_sd <- 2.3
pop1_var <- 50.5
sample2_n <- 32
sample2_mean <- 44.3
#pop2_sd <- 2.7
pop2_var <- 48.6
conf_lvl <- .05
# 2 tails
z <- round(qnorm(conf_lvl), 4)
pop1_var <- pop1_sd^2
pop2_var <- pop2_sd^2
# using population variances
observed_z <- (sample1_mean - sample2_mean)/(sqrt(pop1_var/sample1_n + pop2_var/sample2_n))
lower <- (sample1_mean - sample2_mean) - z*(sqrt(sample1_var/sample1_n + sample2_var/sample2_n))
upper <- (sample1_mean - sample2_mean) + z*(sqrt(sample1_var/sample1_n + sample2_var/sample2_n))
print(paste("critical value =", round(z, 3)))
print(paste("observed z value =", round(observed_z, 3)))
print(paste("lower =", round(lower, 3)))
print(paste("upper =", round(upper, 3)))
observed_z <- (sample1_mean - sample2_mean)/(sqrt(pop1_var/sample1_n + pop2_var/sample2_n))
sample1_n <-38
sample1_mean <- 38.4
#pop1_sd <- 2.3
pop1_var <- 50.5
sample2_n <- 32
sample2_mean <- 44.3
#pop2_sd <- 2.7
pop2_var <- 48.6
conf_lvl <- .05
# 2 tails
z <- round(qnorm(conf_lvl), 4)
# using population variances
observed_z <- (sample1_mean - sample2_mean)/(sqrt(pop1_var/sample1_n + pop2_var/sample2_n))
lower <- (sample1_mean - sample2_mean) - z*(sqrt(sample1_var/sample1_n + sample2_var/sample2_n))
upper <- (sample1_mean - sample2_mean) + z*(sqrt(sample1_var/sample1_n + sample2_var/sample2_n))
print(paste("critical value =", round(z, 3)))
print(paste("observed z value =", round(observed_z, 3)))
print(paste("lower =", round(lower, 3)))
print(paste("upper =", round(upper, 3)))
sample1_n <-15
sample1_mean <- 47.73
#sample1_sd <- 2.3
sample1_var <- 19.495
pop1_mean <- 0
sample2_n <- 12
sample2_mean <- 56.5
#sample2_sd <- 2.7
sample2_var <- 18.273
pop2_mean <- 0
conf_lvl <- .05
# 2 tails
alpha_o_2 <- conf_lvl+ (1-conf_lvl)/2
# find degrees of freedom
df <- (sample1_var/sample1_n + sample2_var/sample2_n)^2/(((sample1_var/sample1_n)^2/sample1_n-1) + ((sample2_var/sample2_n)^2/sample2_n-1))
# 2 tails
t_crit <- round(qt(alpha_o_2, df), 4)
# find the observed t
observed_t <- (sample1_mean - sample2_mean) - (pop1_mean - pop2_mean)/(sqrt(sample1_var/sample1_n + sample2_var/sample2_n))
onf_lvl <- .05
# 2 tails
alpha_o_2 <- conf_lvl/2
# find degrees of freedom
df <- (sample1_var/sample1_n + sample2_var/sample2_n)^2/(((sample1_var/sample1_n)^2/sample1_n-1) + ((sample2_var/sample2_n)^2/sample2_n-1))
# 2 tails
t_crit <- round(qt(alpha_o_2, df), 4)
conf_lvl <- .05
# 2 tails
alpha_o_2 <- conf_lvl/2
# find degrees of freedom
df <- (sample1_var/sample1_n + sample2_var/sample2_n)^2/(((sample1_var/sample1_n)^2/sample1_n-1) + ((sample2_var/sample2_n)^2/sample2_n-1))
# 2 tails
t_crit <- round(qt(alpha_o_2, df), 4)
# find the observed t
observed_t <- (sample1_mean - sample2_mean) - (pop1_mean - pop2_mean)/(sqrt(sample1_var/sample1_n + sample2_var/sample2_n))
df <- (sample1_var/sample1_n + sample2_var/sample2_n)^2/((((sample1_var/sample1_n)^2)/sample1_n-1) + (((sample2_var/sample2_n)^2)/sample2_n-1))
df <- ((sample1_var/sample1_n) + (sample2_var/sample2_n))^2/((((sample1_var/sample1_n)^2)/sample1_n-1) + (((sample2_var/sample2_n)^2)/sample2_n-1))
df <- 0
df1 <- ((sample1_var/sample1_n) + (sample2_var/sample2_n))^2
df2 <- (sample1_var/sample1_n)^2/sample1_n-1
df3 <- (sample2_var/sample2_n)^2/sample2_n-1
df <- df1/(df2 + df3)
df1 <- ((sample1_var/sample1_n) + (sample2_var/sample2_n))^2
df2 <- (sample1_var/sample1_n)^2/(sample1_n-1)
df3 <- (sample2_var/sample2_n)^2/(sample2_n-1)
df <- df1/(df2 + df3)
df1 <- (((sample1_var/sample1_n) + (sample2_var/sample2_n))^2)/((sample1_var/sample1_n)^2/(sample1_n-1) + (sample2_var/sample2_n)^2/(sample2_n-1))
df <- (sample1_n + sample2 -2)
df <- (sample1_n + sample2_n -2)
t_crit <- round(qt(alpha_o_2, df), 4)
observed_t <- (sample1_mean - sample2_mean) - (pop1_mean - pop2_mean)/(sqrt(sample1_var/sample1_n + sample2_var/sample2_n))
print(paste("critical value =", round(t_crit, 3)))
print(paste("observed t value =", round(observed_z, 3)))
observed_t <-((sample1_mean - sample2_mean) - (pop1_mean - pop2_mean))/(sqrt(sample1_var/sample1_n + sample2_var/sample2_n))
print(paste("critical value =", round(t_crit, 3)))
print(paste("observed t value =", round(observed_z, 3)))
observed_t <-((sample1_mean - sample2_mean) - (pop1_mean - pop2_mean))/(sqrt((sample1_var*(sample1_n -1)+ sample2_var*(sample2_n-1))/(sample1_n+sample2_n-2)))*sqrt((1/sample1_n)+(1/sample2_n))
ot1 <- (sample1_mean - sample2_mean) - (pop1_mean - pop2_mean)
ot2 <- sqrt(((sample1_var*(sample1_n-1))+(sample2_var*(sample2_n-1)))/(sample1_n+sample2_n-2))
ot3 <- sqrt((1/sample1_n)+(1/sample2_n))
observed_t <-ot1/(ot2*ot3)
print(paste("critical value =", round(t_crit, 3)))
print(paste("observed t value =", round(observed_t, 3)))
print(paste("observed t value =", round(observed_t, 2)))
print(paste("critical value =", round(t_crit, 2)))
print(paste("observed t value =", round(observed_t, 2)))
sample1_n <-9
sample1_mean <- 37.09
#sample1_sd <- 2.3
sample1_var <- 1.727
pop1_mean <- 0
sample2_n <- 10
sample2_mean <- 34.99
#sample2_sd <- 2.7
sample2_var <- 1.253
pop2_mean <- 0
conf_lvl <- .99
# 2 tails
alpha_o_2 <- conf_lvl+ (1-conf_lvl)/2
alpha_o_2 <- 1 - (1-conf_lvl)/2
alpha_o_2 <- 1-(conf_lvl/2)
alpha_o_2 <- 1 - (conf_lvl+ (1-conf_lvl)/2)
alpha_o_2 <- (1 - conf_lvl)/2
df <- (sample1_n + sample2_n -2)
t_crit <- round(qt(alpha_o_2, df), 4)
# find the observed t
##observed_t <-((sample1_mean - sample2_mean) - (pop1_mean - pop2_mean))/(sqrt(sample1_var/sample1_n + sample2_var/sample2_n))
ot1 <- (sample1_mean - sample2_mean) - (pop1_mean - pop2_mean)
ot2 <- sqrt(((sample1_var*(sample1_n-1))+(sample2_var*(sample2_n-1)))/(sample1_n+sample2_n-2))
ot3 <- sqrt((1/sample1_n)+(1/sample2_n))
observed_t <-ot1/(ot2*ot3)
print(paste("critical t value =", round(t_crit, 2)))
lower <- (sample1_mean - sample2_mean) - t_crit*observed_t
upper <- (sample1_mean - sample2_mean) + t_crit*observed_t
print(paste("lower =", round(lower, 3)))
print(paste("upper =", round(upper, 3)))
t_crit <- abs(round(qt(alpha_o_2, df), 4))
ot1 <- (sample1_mean - sample2_mean) - (pop1_mean - pop2_mean)
ot2 <- sqrt(((sample1_var*(sample1_n-1))+(sample2_var*(sample2_n-1)))/(sample1_n+sample2_n-2))
ot3 <- sqrt((1/sample1_n)+(1/sample2_n))
observed_t <-ot1/(ot2*ot3)
ot1 <- sqrt(((sample1_var*(sample1_n-1))+(sample2_var*(sample2_n-1)))/(sample1_n+sample2_n-2))
ot2 <- sqrt((1/sample1_n)+(1/sample2_n))
observed_t <-ot1*ot2
##observed_t <-((sample1_mean - sample2_mean) - (pop1_mean - pop2_mean))/(sqrt(sample1_var/sample1_n + sample2_var/sample2_n))
ot1 <- (sample1_var*(sample1_n-1))+(sample2_var*(sample2_n-1))
ot2 <- (sample1_n+sample2_n-2)
ot3 <- sqrt(ot1/ot2)
ot4 <- sqrt((1/sample1_n)+(1/sample2_n))
observed_t <-ot3 * ot4
crit_t*observed_t
t_crit*observed_t
t_crit <- abs(round(qt(alpha_o_2, df), 3))
sample1_n <-9
sample1_mean <- 37.09
sample1_sd <- 1.727
sample1_var <- sample1_sd^2
pop1_mean <- 0
sample2_n <- 10
sample2_mean <- 34.99
sample2_sd <- 1.253
sample2_var <- sample2_sd^2
pop2_mean <- 0
conf_lvl <- .99
# 2 tails
alpha_o_2 <- (1 - conf_lvl)/2
# find degrees of freedom
##df1 <- (((sample1_var/sample1_n) + (sample2_var/sample2_n))^2)/((sample1_var/sample1_n)^2/(sample1_n-1) + (sample2_var/sample2_n)^2/(sample2_n-1))
df <- (sample1_n + sample2_n -2)
# 2 tails
t_crit <- abs(round(qt(alpha_o_2, df), 3))
# find the observed t
##observed_t <-((sample1_mean - sample2_mean) - (pop1_mean - pop2_mean))/(sqrt(sample1_var/sample1_n + sample2_var/sample2_n))
ot1 <- (sample1_var*(sample1_n-1))+(sample2_var*(sample2_n-1))
ot2 <- (sample1_n+sample2_n-2)
ot3 <- sqrt(ot1/ot2)
ot4 <- sqrt((1/sample1_n)+(1/sample2_n))
observed_t <-ot3 * ot4
print(paste("critical t value =", round(t_crit, 2)))
lower <- (sample1_mean - sample2_mean) - t_crit*observed_t
upper <- (sample1_mean - sample2_mean) + t_crit*observed_t
print(paste("lower =", round(lower, 3)))
print(paste("upper =", round(upper, 3)))
print(paste("critical t value =", t_crit))
lower <- (sample1_mean - sample2_mean) - t_crit*observed_t
upper <- (sample1_mean - sample2_mean) + t_crit*observed_t
print(paste("lower =", round(lower, 3)))
print(paste("upper =", round(upper, 3)))
company <- c(1,2,3,4,5,6,7,8,9)
year1 <- c(8.9,38.1,43.0,34.0,34.5,15.2,20.3,19.9,61.9)
year2 <- c(12.7,45.4,10.0,27.2,22.8,24.1,32.3,40.1,106.5)
ratios <- data.frame(company, year1, year2)
ratios
plot(year1, year2, main= "Plot of P/E Ratios for Nine Companies", xlab = "Year One",
ylab = "Year Two", col = "red")
abline(a = 0, b = 1, col = "green", lty = 2)
d <- year1 - year2
# If there is a positive correlation between two variables, the variance of their
# difference is less than the sum of the separate variances for the two variables.
var(d)
var(year1)+var(year2)
ratios <- data.frame(ratios, d)
ratios
t.test(d, alternative = c("two.sided"), mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
t.test(year1, year2, alternative = c("two.sided"), mu = 0, paired = TRUE,
var.equal = TRUE, conf.level = 0.95)
company <- c(1,2,3,4,5,6,7,8,9)
year1 <- c(8.9,38.1,43.0,34.0,34.5,15.2,20.3,19.9,61.9)
year2 <- c(12.7,45.4,10.0,27.2,22.8,24.1,32.3,40.1,106.5)
ratios <- data.frame(company, year1, year2)
ratios
plot(year1, year2, main= "Plot of P/E Ratios for Nine Companies", xlab = "Year One",
ylab = "Year Two", col = "red")
abline(a = 0, b = 1, col = "green", lty = 2)
diff_years <- year1 - year2
# If there is a positive correlation between two variables, the variance of their
# difference is less than the sum of the separate variances for the two variables.
var(diff_years)
var(year1)+var(year2)
ratios <- data.frame(ratios, d)
ratios
t.test(diff_years, alternative = c("two.sided"), mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
t.test(year1, year2, alternative = c("two.sided"), mu = 0, paired = TRUE,
var.equal = TRUE, conf.level = 0.95)
t_crit <- abs(round(qt(.025, 8), 3))
t_crit <- abs(round(qt(.005, 8), 3))
morning <- c(48, 400)
after <- c(187, 480)
morning[2] <- morning[2]-morning[1]
after[2] <- after[2]-after[1]
c.matrix <- data.matrix(rbind(morning,after))
c.matrix
prop.test(c.matrix,alternative = c("two.sided"), conf.level = 0.98, correct = FALSE)
# An exact test is available.  It will test the same hypotheses, however the
# confidence interval is for the odds ratio, not the difference in proportions.
fisher.test(c.matrix, alternative = "two.sided", conf.level = 0.98)
#Clear Workspace
rm(list=ls())
# Clear Console:
cat("\014")
setwd('~/NorthwesternU_MSPA/Databases_Predict_420/GrExercises/GrEx4')
dfMail <- read.csv('test.csv', header = T, sep = ",", stringsAsFactors = F)
View(dfMail)
